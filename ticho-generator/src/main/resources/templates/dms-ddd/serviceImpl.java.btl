package ${package.serviceImpl};

import com.github.pagehelper.Page;
import com.github.pagehelper.PageHelper;
import cn.xrtech.mvc.view.BizErrCode;
import cn.xrtech.mvc.view.PageResult;
import cn.xrtech.mvc.util.Assert;
import ${package.service}.${className.service};
import ${package.repository}.${className.repository};
import ${package.entity}.${className.entity};
import ${package.assembler}.${className.assembler};
import ${package.dto}.${className.dto};
import ${package.query}.${className.query};
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.io.Serializable;
import java.util.List;
import java.util.stream.Collectors;

/**
 * ${table.comment!} 服务实现
 *
 * @author ${author!}
 * @date ${date!}
 */
<% var lowEntity = strutil.toLowerCase(strutil.subStringTo(table.entityName,0,1))+strutil.subString(table.entityName,1); %>
@Service
public class ${className.serviceImpl} implements ${className.service} {

    @Autowired
    private ${table.entityName}Repository ${lowEntity}Repository;

    @Override
    public void save(${className.dto} ${lowEntity}DTO) {
        ${className.entity} ${lowEntity} = ${className.assembler}.INSTANCE.dtoToEntity(${lowEntity}DTO);
        Assert.isTrue(${lowEntity}Repository.save(${lowEntity}), BizErrCode.FAIL, "保存失败");
    }

    @Override
    public void removeBy${keyNameUF}(Serializable ${keyNameLF}) {
        Assert.isTrue(${lowEntity}Repository.removeById(${keyNameLF}), BizErrCode.FAIL, "删除失败");
    }

    @Override
    public void updateBy${keyNameUF}(${className.dto} ${lowEntity}DTO) {
        ${className.entity} ${lowEntity} = ${className.assembler}.INSTANCE.dtoToEntity(${lowEntity}DTO);
        Assert.isTrue(${lowEntity}Repository.updateById(${lowEntity}), BizErrCode.FAIL, "修改失败");
    }

    @Override
    public ${className.dto} getBy${keyNameUF}(Serializable ${keyNameLF}) {
        ${className.entity} ${lowEntity} = ${lowEntity}Repository.getById(${keyNameLF});
        return ${className.assembler}.INSTANCE.entityToDto(${lowEntity});
    }

    @Override
    public PageResult<${className.dto}> page(${className.query} query) {
        // @formatter:off
        query.checkPage();
        Page<${table.entityName}> page = PageHelper.startPage(query.getPageNum(), query.getPageSize());
        ${lowEntity}Repository.list(query);
        List<${className.dto}> ${lowEntity}DTOs = page.getResult()
            .stream()
            .map(${className.assembler}.INSTANCE::entityToDto)
            .collect(Collectors.toList());
        return new PageResult<>(page.getPageNum(), page.getPageSize(), page.getTotal(), ${lowEntity}DTOs);
        // @formatter:on
    }
}
