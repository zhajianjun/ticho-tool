package ${package.repositoryImpl};

<% if(enableMybatisPlus){ %>
import cn.hutool.core.util.StrUtil;
import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;
import com.baomidou.mybatisplus.core.toolkit.Wrappers;
import cn.xrtech.datasource.service.impl.RootServiceImpl;
import ${package.repository}.${className.repository};
import ${package.entity}.${className.entity};
import ${package.mapper}.${className.mapper};
import ${package.query}.${className.query};
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Objects;
<% } %>
<% /** --------------------------------- **/ %>
<% if(!enableMybatisPlus){ %>
import cn.hutool.core.collection.CollUtil;
import ${package.entity}.${className.entity};
import ${package.query}.${className.query};
import ${package.mapper}.${className.mapper};
import lombok.extern.slf4j.Slf4j;
import ${package.repository}.${className.repository};
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.io.Serializable;
import java.util.Collection;
import java.util.List;
<% } %>

/**
 * ${table.comment!} repository实现
 *
 * @author ${author!}
 * @date ${date!}
 */
<% var lowEntity = strutil.toLowerCase(strutil.subStringTo(table.entityName,0,1))+strutil.subString(table.entityName,1); %>
@Slf4j
@Service
<% if(enableMybatisPlus){ %>
public class ${className.repositoryImpl} extends RootServiceImpl<${className.mapper}, ${className.entity}> implements ${className.repository} {

    @Override
    public List<${table.entityName}> list(${className.query} query) {
        // @formatter:off
        LambdaQueryWrapper<${table.entityName}> wrapper = Wrappers.lambdaQuery();
    <% for(field in table.fields){ %>
        <%
        var getprefix ='';
        if(field.propertyType=='boolean'){
            getprefix='is';
        }else{
            getprefix='get';
        }
        %>
        <%if(field.propertyType == "String" ){%>
        wrapper.eq(StrUtil.isNotBlank(query.${getprefix}${field.propertyUpperName}()), ${table.entityName}::${getprefix}${field.propertyUpperName}, query.${getprefix}${field.propertyUpperName}());
        <%}else{%>
        wrapper.eq(Objects.nonNull(query.${getprefix}${field.propertyUpperName}()), ${table.entityName}::${getprefix}${field.propertyUpperName}, query.${getprefix}${field.propertyUpperName}());
        <% } %>
    <% } %>
        return list(wrapper);
        // @formatter:on
    }

}
<% } else { %>
public class ${className.repositoryImpl} implements ${className.repository} {

    @Autowired
    private ${table.entityName}Mapper ${lowEntity}Mapper;

    @Override
    public boolean save(${table.entityName} ${lowEntity}) {
        if (${lowEntity} == null) {
            log.info("${table.comment!}保存异常，对象为null");
            return false;
        }
        return ${lowEntity}Mapper.insert(${lowEntity}) == 1;
    }

    @Override
    @Transactional(rollbackFor = {Exception.class})
    public boolean saveBatch(Collection<${table.entityName}> ${lowEntity}s) {
        return this.saveBatch(${lowEntity}s, 200);
    }

    @Transactional(rollbackFor = {Exception.class})
    public boolean saveBatch(Collection<${table.entityName}> ${lowEntity}s, int batchSize) {
        if (CollUtil.isEmpty(${lowEntity}s)) {
            log.info("${table.comment!}批量保存异常，集合为null或者大小为0");
            return false;
        }
        if (batchSize <= 0 || batchSize > 1000) {
            batchSize = 200;
        }
        List<List<${table.entityName}>> split = CollUtil.split(${lowEntity}s, batchSize);
        Integer total = split.stream().map(${lowEntity}Mapper::insertBatch).reduce(1, Integer::sum);
        return total == ${lowEntity}s.size();
    }

    @Override
    public boolean removeById(Serializable ${keyNameLF}) {
        if (${keyNameLF} == null) {
            log.info("${table.comment!}删除异常，主键ID为null");
            return false;
        }
        return ${lowEntity}Mapper.deleteById(${keyNameLF}) > 0;
    }

    @Override
    public boolean removeByIds(Collection<? extends Serializable> ${keyNameLF}s) {
        return removeByIds(${keyNameLF}s, 200);
    }

    public boolean removeByIds(Collection<? extends Serializable> ${keyNameLF}s, int batchSize) {
        if (CollUtil.isEmpty(${keyNameLF}s)) {
            log.info("${table.comment!}批量删除异常，集合为null或者大小为0");
            return false;
        }
        if (batchSize <= 0 || batchSize > 1000) {
            batchSize = 200;
        }
        List<? extends List<? extends Serializable>> split = CollUtil.split(${keyNameLF}s, batchSize);
        Integer total = split.stream().map(${lowEntity}Mapper::deleteBatchIds).reduce(1, Integer::sum);
        return total == ${keyNameLF}s.size();
    }

    @Override
    public boolean updateById(${table.entityName} ${lowEntity}) {
        if (${lowEntity} == null) {
            log.info("${table.comment!}更新异常，角色为null");
            return false;
        }
        return ${lowEntity}Mapper.updateById(${lowEntity}) > 0;
    }

    @Override
    public ${table.entityName} getById(Serializable ${keyNameLF}) {
        return ${lowEntity}Mapper.selectById(${keyNameLF});
    }

    @Override
    public List<${table.entityName}> list(${className.query} query) {
        return ${lowEntity}Mapper.selectByConditions(query);
    }

}

<% } %>
