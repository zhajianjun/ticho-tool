package ${package.mapper};

<% if(!enableMybatisPlus){ %>
import ${package.entity}.${className.entity};
import ${package.query}.${className.query};
import org.springframework.stereotype.Repository;

import java.io.Serializable;
import java.util.List;
<% } %>
<% /** --------------------------------- **/ %>
<% if(enableMybatisPlus){ %>
import com.baomidou.mybatisplus.core.mapper.BaseMapper;
import ${package.entity}.${className.entity};
import ${package.query}.${className.query};
import org.springframework.stereotype.Repository;

import java.util.List;
<% } %>

/**
 * ${table.comment!} mapper
 *
 * @author ${author!}
 * @createTime ${date!}
 */
<% var lowEntity = strutil.toLowerCase(strutil.subStringTo(table.entityName,0,1))+strutil.subString(table.entityName,1); %>
@Repository
<% if(enableMybatisPlus){ %>
public interface ${className.mapper} extends BaseMapper<${table.entityName}> {

    /**
     * 根据条件查询 ${table.comment!} 列表
     *
     * @param ${lowEntity}Query 条件
     * @return List<${table.entityName}> ${table.comment!} 列表
     */
    List<${table.entityName}> selectByConditions(${table.entityName}Query ${lowEntity}Query);

<% }else{ %>
public interface ${className.mapper} {
<% } %>
<% if(!enableMybatisPlus){ %>

    /**
     * 保存 ${table.comment!}
     *
     * @param ${lowEntity} ${table.comment!} 对象
     * @return int 数量
     */
    int insert(${table.entityName} ${lowEntity});

    /**
     * 批量保存 ${table.comment!}
     *
     * @param ${lowEntity}s ${table.comment!} 对象
     * @return int 数量
     */
    int insertBatch(List<${table.entityName}> ${lowEntity}s);

    /**
     * 删除 ${table.comment!}
     *
     * @param ${keyNameLF} 主键
     * @return int
     */
    int deleteBy${keyNameUF}(Serializable ${keyNameLF});

    /**
     * 更新 ${table.comment!}
     *
     * @param ${lowEntity} ${table.comment!}对象
     * @return int
     */
    int update(${table.entityName} ${lowEntity});

    /**
     * 根据${keyNameLF}查询 ${table.comment!}
     *
     * @param ${keyNameLF} 主键
     * @return ${table.comment!} 对象
     */
    ${table.entityName} selectBy${keyNameUF}(Serializable ${keyNameLF});

    /**
     * 有则更新无则插入
     *
     * <p>针对mysql、按照主键来判断的</p>
     *
     * @param ${lowEntity}s ${table.comment!}
     * @return int 数量
     */
    int insertOrUpdate(${table.entityName} ${lowEntity}s);

    /**
     * 批量有则更新无则插入
     *
     * <p>注意：</p>
     * <p>1.仅同步任务且无频繁插入场景使用，高并发插入更新请不要用这种方式操作，会有死锁问题。</p>
     * <p>2.针对mysql、按照主键来判断的</p>
     *
     * @param ${lowEntity}s ${table.comment!} 列表
     * @return int 数量
     */
    int insertOrUpdateBatch(List<${table.entityName}> ${lowEntity}s);

    /**
     * 根据条件查询 ${table.comment!} 列表
     *
     * @param ${lowEntity}Query 条件
     * @return List<${table.entityName}> ${table.comment!} 列表
     */
    List<${table.entityName}> selectByConditions(${table.entityName}Query ${lowEntity}Query);
<% } %>
}